// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  directUrl    = env("DIRECT_URL")
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

enum RiskStatus {
  NEW
  OPEN
  CLOSED
}

enum UserRole {
  USER
  MANAGER
  OWNER
}

enum UserStatus {
  ACTIVE
  PENDING
  INACTIVE
}

model Company {
  id        String   @id @default(uuid())
  email     String
  cvr       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contact   Contact? @relation(fields: [contactId], references: [id])
  contactId String?

  projects Project[]
  users    User[]
}

model Contact {
  id       String  @id @default(uuid())
  email    String
  fullName String
  address  String?
  phone    String?
  website  String?

  project   Project?  @relation(fields: [projectId], references: [id])
  projectId String?
  user      User[]
  Company   Company[]
}

model User {
  id             String   @id @default(uuid())
  email          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  role           UserRole
  jobDescription String?

  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  contact   Contact? @relation(fields: [contactId], references: [id])
  contactId String?

  projectUsers ProjectUser[]
  risks        Risk[]
}

model Project {
  id                      String   @id @default(uuid())
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  name                    String
  description             String
  startDate               DateTime
  dueDate                 DateTime
  budget                  String?
  riskRegisterDescription String?
  riskReportIntro         String?
  riskReportDocumentId    String?
  test                    String?

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  contacts Contact[]
  risks    Risk[]

  projectUsers ProjectUser[]
}

model ProjectUser {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@id([userId, projectId])
}

model Risk {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  customId    String
  description String
  probability Int
  consequence Int
  status      RiskStatus
  comment     String?
  activity    String?

  riskowner User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
}
