generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  directUrl    = env("DIRECT_URL")
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

enum RiskStatus {
  PLANNING
  OPEN
  CLOSED
}

enum UserRole {
  USER
  MANAGER
  OWNER
}

enum UserStatus {
  ACTIVE
  PENDING
  INACTIVE
}

enum ProjectStatus {
  PLANNING
  OPEN
  CLOSED
}

model Company {
  id        String   @id @default(uuid())
  email     String   @unique
  cvr       String?  @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contact   Contact? @relation(fields: [contactId], references: [id])
  contactId String?

  projects Project[]
  users    User[]
}

model Contact {
  id       String  @id @default(uuid())
  fullName String
  address  String?
  phone    String?
  website  String?

  project   Project?  @relation(fields: [projectId], references: [id])
  projectId String?
  user      User[]
  Company   Company[]
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  fullName       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  role           UserRole
  jobDescription String?

  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  contact   Contact? @relation(fields: [contactId], references: [id])
  contactId String?

  projectUsers     ProjectUser[]
  risks            Risk[]
  authoredComments Comment[]     @relation("author")
  resolvedComments Comment[]     @relation("resolver")
}

model Project {
  id                      String        @id @default(uuid())
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  name                    String
  description             String
  status                  ProjectStatus @default(PLANNING)
  startDate               DateTime?
  dueDate                 DateTime?
  budget                  String?
  riskRegisterDescription String?
  riskReportIntro         String?
  riskReportDocumentId    String?
  test                    String?

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  contacts Contact[]
  risks    Risk[]

  projectUsers ProjectUser[]
  phases       Phase[]
}

model ProjectUser {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@id([userId, projectId])
}

model Risk {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  customId    Int
  description String
  probability Int?
  consequence Int?
  status      RiskStatus
  comment     String?
  activity    String?

  riskowner       User?   @relation(fields: [riskOwnerUserId], references: [id])
  riskOwnerUserId String?
  project         Project @relation(fields: [projectId], references: [id])
  projectId       String

  comments          Comment[]
  children          ChildRisk[]
  mitigationPhase   Phase?      @relation("MitigationPhase", fields: [mitigationPhaseId], references: [id])
  mitigationPhaseId String?
  projectPhase      Phase?      @relation("ProjectPhase", fields: [projectPhaseId], references: [id])
  projectPhaseId    String?

  @@unique([projectId, customId])
}

model ChildRisk {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  probability Int?
  consequence Int?
  comment     String?
  activity    String?

  parentId String
  parent   Risk   @relation(fields: [parentId], references: [id], onDelete: Cascade)
}

model Comment {
  id         String    @id @default(uuid())
  content    String    @default("")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  resolvedAt DateTime?

  authorId String
  author   User   @relation("author", fields: [authorId], references: [id])

  resolvedById String?
  resolvedBy   User?   @relation("resolver", fields: [resolvedById], references: [id])

  risk   Risk   @relation(fields: [riskId], references: [id])
  riskId String
}

model Phase {
  id        String   @id @default(uuid())
  name      String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  projectRisks    Risk[] @relation("ProjectPhase")
  mitigationRisks Risk[] @relation("MitigationPhase")
}
