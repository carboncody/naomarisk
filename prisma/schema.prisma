generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  directUrl    = env("DIRECT_URL")
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

enum RiskStatus {
  PLANNING
  OPEN
  CLOSED
}

enum CSMStatus {
  PLANNING
  ACTIVE
  CLOSED
}

enum UserRole {
  USER
  MANAGER
  OWNER
}

enum UserStatus {
  ACTIVE
  PENDING
  INACTIVE
}

enum ProjectStatus {
  OPEN
  CLOSED
  ARCHIVED
}

enum ProjectRole {
  MEMBER
  MANAGER
}

model Company {
  id        String   @id @default(uuid())
  email     String   @unique
  cvr       String?  @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contact   Contact? @relation(fields: [contactId], references: [id])
  contactId String?

  projects Project[]
  users    User[]

  CSMProject CsmProject[]
}

model Contact {
  id       String  @id @default(uuid())
  fullName String
  address  String?
  phone    String?
  website  String?

  project   Project?  @relation(fields: [projectId], references: [id])
  projectId String?
  user      User[]
  Company   Company[]

  CSMProject CsmProject[]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      UserRole

  jobDescription String?

  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  contact   Contact? @relation(fields: [contactId], references: [id])
  contactId String?

  projectUsers   ProjectUser[]
  csmProjectUser CsmProjectUser[]

  riskowner   Risk[] @relation("RiskOwner")
  riskmanager Risk[] @relation("RiskManager")

  authoredComments Comment[] @relation("author")
  resolvedComments Comment[] @relation("resolver")

  Hazard Hazard[]
}

model Project {
  id                      String        @id @default(uuid())
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  name                    String
  description             String
  status                  ProjectStatus @default(OPEN)
  startDate               DateTime?
  dueDate                 DateTime?
  budget                  String?
  riskRegisterDescription String?
  riskReportIntro         String?
  riskReportDocumentId    String?
  test                    String?

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  contacts Contact[]
  risks    Risk[]

  projectUsers ProjectUser[]
  phases       Phase[]
}

model CsmProject {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String
  description String
  status      ProjectStatus @default(OPEN)
  startDate   DateTime?
  dueDate     DateTime?
  budget      String?

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  contacts Contact[]
  hazards  Hazard[]

  CSMProjectUser CsmProjectUser[]
}

model ProjectUser {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  role ProjectRole @default(MEMBER)

  @@id([userId, projectId])
}

model CsmProjectUser {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User       @relation(fields: [userId], references: [id])
  userId       String
  csmProject   CsmProject @relation(fields: [csmProjectId], references: [id])
  csmProjectId String

  role ProjectRole @default(MEMBER)

  @@id([userId, csmProjectId])
}

model Risk {
  id                  String     @id @default(uuid())
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  customId            Int
  description         String
  probability         Int?
  consequence         Int?
  timeProbability     Int?
  timeConsequence     Int?
  economicProbability Int?
  economicConsequence Int?
  status              RiskStatus
  comment             String?
  activity            String?

  riskOwner         User?   @relation("RiskOwner", fields: [riskOwnerUserId], references: [id])
  riskOwnerUserId   String?
  riskManager       User?   @relation("RiskManager", fields: [riskManagerUserId], references: [id])
  riskManagerUserId String?

  project           Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId         String
  mitigationPhase   Phase?  @relation("MitigationPhase", fields: [mitigationPhaseId], references: [id])
  mitigationPhaseId String?
  projectPhase      Phase?  @relation("ProjectPhase", fields: [projectPhaseId], references: [id])
  projectPhaseId    String?

  comments Comment[]
  children ChildRisk[]

  @@unique([projectId, customId])
}

model ChildRisk {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  probability Int?
  consequence Int?
  comment     String?
  activity    String?

  parentId String
  parent   Risk   @relation(fields: [parentId], references: [id], onDelete: Cascade)
}

model Comment {
  id         String    @id @default(uuid())
  content    String    @default("")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  resolvedAt DateTime?

  authorId String
  author   User   @relation("author", fields: [authorId], references: [id])

  resolvedById String?
  resolvedBy   User?   @relation("resolver", fields: [resolvedById], references: [id])

  risk   Risk   @relation(fields: [riskId], references: [id], onDelete: Cascade)
  riskId String
}

model Phase {
  id          String   @id @default(uuid())
  name        String
  startDate   DateTime
  description String?
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  projectRisks    Risk[] @relation("ProjectPhase")
  mitigationRisks Risk[] @relation("MitigationPhase")
}

model Hazard {
  id                           String    @id @default(uuid())
  customId                     Int       @default(autoincrement())
  status                       CSMStatus
  identifiedDate               DateTime  @default(now())
  version                      String
  revisionDate                 DateTime  @updatedAt
  responsibleUserId            String?
  responsibleUser              User?     @relation(fields: [responsibleUserId], references: [id])
  unwantedState                String
  cause                        String
  underlyingCauses             String
  comments                     String?
  accidentCategory             String
  personCategory               String
  consequence                  String
  acceptanceCriteriaBefore     String
  subject                      String
  changeType                   String
  projectActivity              String
  activityCompletionDate       DateTime?
  csmRaRiskAcceptancePrinciple String
  riskAcceptanceReferences     String?
  riskReductionMeasures        String
  riskReductionComments        String
  safetyRequirementDocs        String
  measureStatus                String
  riskLevelAfterMeasures       String
  appendix1                    String?
  appendix2                    String?
  appendix3                    String?

  csmProject   CsmProject @relation(fields: [csmProjectId], references: [id], onDelete: Cascade)
  csmProjectId String
}
